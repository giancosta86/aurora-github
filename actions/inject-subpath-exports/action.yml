name: Inject subpath exports
description: Appends subpath exports to package.json according to the directory tree.

inputs:
  mode:
    description: Subpath exports generation mode; can be "prefer-index" or "all".
    default: prefer-index

  source-directory:
    description: Relative path to the source directory.
    default: src

  project-directory:
    description: The directory containing package.json.
    default: .

runs:
  using: composite
  steps:
    - shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        main() {
          validateInputs
          displayInitialExports
          performInjection
          displayFinalExports
        }

        validateInputs() {
          case "${{ inputs.mode }}" in
            "prefer-index" | all)
              ;;
            *)
              echo "❌Invalid value for 'mode' input: '${{ inputs.mode }}'!" >&2
              exit 1
          esac

          if [[ -z "${{ inputs.source-directory }}" ]]
          then
            echo "❌Missing action input: 'source-directory'!" >&2
            exit 1
          fi

          if [[ ! -f "package.json" ]]
          then
            echo "❌The package.json descriptor file does not exist!!" >&2
            exit 1
          fi

          if [[ ! -d "${{ inputs.source-directory }}" ]]
          then
            echo "❌Source directory '${{ inputs.source-directory }}' does not exist!" >&2
            exit 1
          fi
        }

        displayInitialExports() {
          echo "📦package.json exports at the beginning of inject-subpath-exports:"
          jq -C .exports package.json
        }

        performInjection() {
          local mode="${{ inputs.mode }}"
          local sourceDirectory="${{ inputs.source-directory }}"

          local rootIndexNames=("index.ts" "index.js")

          local rootIndexName
          for rootIndexName in ${rootIndexNames[@]}
          do
            local potentialRootIndex="$sourceDirectory/$rootIndexName"

            echo "🔎Looking for potential root index: '${potentialRootIndex}'"

            if [[ -f "$potentialRootIndex" ]]
            then
              local rootIndex="$potentialRootIndex"
              break
            fi
          done

          if [[ -n "$rootIndex" ]]
          then
            echo "✅Root index file found: '$rootIndex'!"

            updatePackageJson "$(cat <<EOF
              .exports += {
                ".": {
                  types: "./dist/index.d.ts",
                  import: "./dist/index.js"
                }
              }
        EOF
            )"

            if [[ "$mode" == "prefer-index" ]]
            then
              echo "🐹In this mode, since the root index has been found, no more subpath exports will be injected"

              return 0
            fi
          else
            echo "💭No root index file found..."
          fi

          find "$sourceDirectory" -mindepth 2 -maxdepth 2 -type f -regex '.*/index\.\(t\|j\)s' | sort | while IFS= read -r subIndexFile
          do
            local exportName="$(dirname "$subIndexFile" | xargs basename)"

            local distExportDirectory="./dist/$exportName"

            echo "✅Export '${exportName}' provided by dist directory: '${distExportDirectory}'"

            local declarationsFile="${distExportDirectory}/index.d.ts"

            local esmFile="${distExportDirectory}/index.js"

            updatePackageJson "$(cat <<EOF
              .exports += {
                "./$exportName": {
                  types: "$declarationsFile",
                  import: "$esmFile"
                }
              }
        EOF
            )"
          done
        }

        updatePackageJson() {
          local updatingExpression="$1"

          local tempPackage="$(mktemp)"

          jq "$updatingExpression" package.json > "$tempPackage"
          mv "$tempPackage" package.json
        }

        displayFinalExports() {
          echo "📦package.json exports at the end of inject-subpath-exports:"
          jq -C .exports package.json
        }

        main

name: Verify Rust web assembly
description: Verifies the source files of a Rust web assembly.

inputs:
  wasm-pack-version:
    description: The wasm-pack version to install.

  npm-scope:
    description: The npm package scope or "<ROOT>".

  client-tests-directory:
    description: Relative directory containing the client tests.
    default: client-tests

  wasm-target:
    description: The target of the 'wasm-pack build' command.
    default: web

  run-clippy-checks:
    description: Enable linting via Clippy.
    default: true

  check-rustdoc:
    description: Build the documentation - with warnings as errors.
    default: false

  crash-on-critical-todos:
    description: Crash the workflow if critical TODOs are found.
    default: true

  source-file-regex:
    description: PCRE pattern describing the source files.
    default: '^\.\/((src|tests)\/.+\.rs)|(client-tests\/.+\.(c|m)?(j|t)sx?)$'

  enforce-branch-version:
    description: How the branch version should be enforced.
    default: inject

  project-directory:
    description: The directory containing Cargo.toml.
    default: .

runs:
  using: composite
  steps:
    - name: Validate inputs
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        if [[ -z "${{ inputs.wasm-pack-version }}" ]]
        then
          echo "‚ùåMissing action input: 'wasm-pack-version'!" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.npm-scope }}" ]]
        then
          echo "‚ùåMissing action input: 'npm-scope'!" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.client-tests-directory }}" ]]
        then
          echo "‚ùåMissing action input: 'client-tests-directory'!" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.wasm-target }}" ]]
        then
          echo "‚ùåMissing action input: 'wasm-target'!" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.run-clippy-checks }}" ]]
        then
          echo "‚ùåMissing action input: 'run-clippy-checks'!" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.check-rustdoc }}" ]]
        then
          echo "‚ùåMissing action input: 'check-rustdoc'!" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.crash-on-critical-todos }}" ]]
        then
          echo "‚ùåMissing action input: 'crash-on-critical-todos'!" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.source-file-regex }}" ]]
        then
          echo "‚ùåMissing action input: 'source-file-regex'!" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.enforce-branch-version }}" ]]
        then
          echo "‚ùåMissing action input: 'enforce-branch-version'!" >&2
          exit 1
        fi

    - name: Install wasm-pack
      uses: giancosta86/aurora-github/actions/install-wasm-pack@v7.0.1
      with:
        wasm-pack-version: ${{ inputs.wasm-pack-version }}

    - name: Verify Rust source files
      uses: giancosta86/aurora-github/actions/verify-rust-crate@v7.0.1
      with:
        run-clippy-checks: ${{ inputs.run-clippy-checks }}
        check-rustdoc: ${{ inputs.check-rustdoc }}
        crash-on-critical-todos: ${{ inputs.crash-on-critical-todos }}
        source-file-regex: ${{ inputs.source-file-regex }}
        enforce-branch-version: ${{ inputs.enforce-branch-version }}
        project-directory: ${{ inputs.project-directory }}

    - name: Run headless browser tests
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        echo "üåêRunning headless browser tests..."
        wasm-pack test --chrome --headless --release
        echo "‚úÖHeadless browser tests OK!"

    - name: Generate the NodeJS package source files
      uses: giancosta86/aurora-github/actions/generate-wasm-target@v7.0.1
      with:
        target: ${{ inputs.wasm-target }}
        npm-scope: ${{ inputs.npm-scope }}
        development: true
        target-directory: pkg
        project-directory: ${{ inputs.project-directory }}

    - name: Run client tests
      uses: giancosta86/aurora-github/actions/run-custom-tests@v7.0.1
      with:
        optional: true
        root-directory: ${{ inputs.project-directory }}/${{ inputs.client-tests-directory }}

    - name: Print confirmation message
      shell: bash
      run: echo "‚úÖRust web assembly source files verified!"

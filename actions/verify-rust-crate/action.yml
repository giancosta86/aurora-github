name: Verify Rust crate
description: Verifies the source files of a Rust crate.

inputs:
  run-clippy-checks:
    description: Enable linting via Clippy.
    default: true

  check-rustdoc:
    description: Build the documentation - with warnings as errors.
    default: true

  crash-on-critical-todos:
    description: Crash the workflow if critical TODOs are found.
    default: true

  source-file-regex:
    description: PCRE pattern describing the source files.
    default: '^\.\/(src|tests)\/.+\.rs$'

  enforce-branch-version:
    description: How the branch version should be enforced.
    default: inject

  project-directory:
    description: The directory containing Cargo.toml.
    default: .

runs:
  using: composite
  steps:
    - name: Validate inputs
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        if [[ -z "${{ inputs.run-clippy-checks }}" ]]
        then
          echo "❌Missing action input: 'run-clippy-checks'!" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.check-rustdoc }}" ]]
        then
          echo "❌Missing action input: 'check-rustdoc'!" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.crash-on-critical-todos }}" ]]
        then
          echo "❌Missing action input: 'crash-on-critical-todos'!" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.source-file-regex }}" ]]
        then
          echo "❌Missing action input: 'source-file-regex'!" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.enforce-branch-version }}" ]]
        then
          echo "❌Missing action input: 'enforce-branch-version'!" >&2
          exit 1
        fi

    - name: Check the project license
      uses: giancosta86/aurora-github/actions/check-project-license@v9.0.0

    - name: Enforce branch version
      uses: giancosta86/aurora-github/actions/enforce-branch-version@v9.0.0
      with:
        mode: ${{ inputs.enforce-branch-version }}
        project-directory: ${{ inputs.project-directory }}

    - name: Check Rust versions
      uses: giancosta86/aurora-github/actions/check-rust-versions@v9.0.0
      with:
        project-directory: ${{ inputs.project-directory }}

    - name: Check style
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        checkStyle() {
          checkFormat

          if [[ "${{ inputs.run-clippy-checks }}" == "true" ]]
          then
            runClippyChecks
          fi
        }

        checkFormat() {
          echo "🎨Checking source code format..."
          cargo fmt --check
          echo "✅Source code format OK!"
        }

        runClippyChecks() {
          echo "📎Running clippy checks..."
          cargo clippy --all-targets --all-features -- -D warnings
          echo "✅Clippy checks OK!"
        }

        checkStyle

    - name: Extract code snippets as tests from README.md
      uses: giancosta86/aurora-github/actions/extract-rust-snippets@v9.0.0
      with:
        optional: true
        project-directory: ${{ inputs.project-directory }}

    - name: Run tests
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        runTests() {
          runVanillaTests

          runAllFeaturesTests

          if [[ "${{ inputs.check-rustdoc }}" == "true" ]]
          then
            runDocTests
          fi
        }

        runVanillaTests() {
          echo "🔬Running tests with no features enabled..."
          cargo test
          echo "✅Tests with no features OK!"
        }

        runAllFeaturesTests() {
          echo "🔬Running tests with all the features enabled..."
          cargo test --all-features
          echo "✅Tests with all the features OK!"
        }

        runDocTests() {
          echo "📚Running doctests with all the features enabled..."
          RUSTDOCFLAGS="-D warnings" cargo doc --all-features
          echo "✅Doctests with all the features OK!"
        }

        runTests

    - name: Check for critical TODOs
      uses: giancosta86/aurora-github/actions/find-critical-todos@v9.0.0
      with:
        source-file-regex: ${{ inputs.source-file-regex }}
        crash-on-found: ${{ inputs.crash-on-critical-todos }}
        display-lines: true
        root-directory: ${{ inputs.project-directory }}

    - name: Print confirmation message
      shell: bash
      run: echo "✅Rust crate project verified!"

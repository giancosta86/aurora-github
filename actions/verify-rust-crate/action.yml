name: Verify Rust crate
description: Verifies the source files of a Rust crate.

inputs:
  run-clippy-checks:
    description: Enable linting via Clippy.
    default: true

  check-rustdoc:
    description: Build the documentation - with warnings as errors.
    default: true

  crash-on-critical-todos:
    description: Crash the workflow if critical TODOs are found.
    default: true

  source-file-regex:
    description: PCRE pattern describing the source files.
    default: '^\.\/(src|tests)\/.+\.rs$'

  check-artifact-version:
    description: Ensure the version in Cargo.toml matches the branch name.
    default: true

  project-directory:
    description: The directory containing Cargo.toml.
    default: .

runs:
  using: composite
  steps:
    - name: Validate inputs
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        if [[ -z "${{ inputs.run-clippy-checks }}" ]]
        then
          echo "❌Missing action input: 'run-clippy-checks'!" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.check-rustdoc }}" ]]
        then
          echo "❌Missing action input: 'check-rustdoc'!" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.crash-on-critical-todos }}" ]]
        then
          echo "❌Missing action input: 'crash-on-critical-todos'!" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.source-file-regex }}" ]]
        then
          echo "❌Missing action input: 'source-file-regex'!" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.check-artifact-version }}" ]]
        then
          echo "❌Missing action input: 'check-artifact-version'!" >&2
          exit 1
        fi

    - name: Check artifact version
      if: ${{ inputs.check-artifact-version == 'true' }}
      uses: giancosta86/aurora-github/actions/check-artifact-version@v6.0.0
      with:
        project-directory: ${{ inputs.project-directory }}

    - name: Check Rust versions
      uses: giancosta86/aurora-github/actions/check-rust-versions@v6.0.0
      with:
        project-directory: ${{ inputs.project-directory }}

    - name: Check format style
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        echo "🎨Checking source code format..."
        cargo fmt --check
        echo "✅Source code format OK!"

    - name: Lint via Clippy - with warnings as errors
      if: ${{ inputs.run-clippy-checks == 'true' }}
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        echo "📎Running clippy checks..."
        cargo clippy --all-targets --all-features -- -D warnings
        echo "✅Clippy checks OK!"

    - name: Check if README.md exists
      id: detect-readme
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        if [[ -f "README.md" ]]
        then
          echo "🗒️README.md found! Trying to extract snippets!"
          readmeExists=true
        else
          echo "💭README.md not found - unable to extract snippets."
          readmeExists=false
        fi

        echo "readme-exists=$readmeExists" >> $GITHUB_OUTPUT

    - name: Extract code snippets as tests from README.md
      if: ${{ steps.detect-readme.outputs.readme-exists == 'true' }}
      uses: giancosta86/aurora-github/actions/extract-rust-snippets@v6.0.0
      with:
        project-directory: ${{ inputs.project-directory }}

    - name: Run vanilla (no features) tests
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        echo "🔎Running tests with no features enabled..."
        cargo test
        echo "✅Tests with no features OK!"

    - name: Run full (all features) tests
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        echo "🔬Running tests with all the features enabled..."
        cargo test --all-features
        echo "✅Tests with all the features OK!"

    - name: Run documentation checks - with warnings as errors
      if: ${{ inputs.check-rustdoc == 'true' }}
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        echo "📚Running doctests with all the features enabled..."
        RUSTDOCFLAGS="-D warnings" cargo doc --all-features
        echo "✅Doctests with all the features OK!"

    - name: Check for critical TODOs
      uses: giancosta86/aurora-github/actions/find-critical-todos@v6.0.0
      with:
        source-file-regex: ${{ inputs.source-file-regex }}
        crash-on-found: ${{ inputs.crash-on-critical-todos }}
        display-lines: true
        root-directory: ${{ inputs.project-directory }}

    - name: Print confirmation message
      shell: bash
      run: echo "✅Rust crate source files verified!"

name: generate-wasm-target
description: Generates the source files for a WebAssembly target from a Rust project.

inputs:
  target:
    description: The target of the 'wasm-pack build' command.

  npm-scope:
    description: The package scope or "<ROOT>", for npm targets.

  nodejs-version:
    description: The "engines / node" version within package.json.

  pnpm-version:
    description: The "packageManager" reference to pnpm within package.json.

  development:
    description: Enable debugging info.

  target-directory:
    description: Directory (relative to 'project-directory') for the generated target.

  project-directory:
    description: The directory containing Cargo.toml.
    default: "."

runs:
  using: composite
  steps:
    - name: Validate inputs
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        if [[ -z "${{ inputs.target }}" ]]
        then
          echo "❌Missing action input: 'target'!" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.development }}" ]]
        then
          echo "❌Missing action input: 'development'!" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.target-directory }}" ]]
        then
          echo "❌Missing action input: 'target-directory'!" >&2
          exit 1
        fi

    - name: Parse npm scope
      id: parse-npm-scope
      if: ${{ inputs.npm-scope != '' }}
      uses: giancosta86/aurora-github/actions/parse-npm-scope@v8.1.0
      with:
        scope: ${{ inputs.npm-scope }}

    - name: Generate the WebAssembly target
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        target="${{ inputs.target }}"
        echo "📥Target: '$target'"

        echo "📥Requested npm-scope: '${{ inputs.npm-scope }}'"
        scope="${{ steps.parse-npm-scope.outputs.actual-scope }}"
        echo "🔎Actual npm scope: '$scope'"

        development="${{ inputs.development }}"
        echo "📥Development? $development"

        nodejsVersion="${{ inputs.nodejs-version }}"
        echo "📥NodeJS version: '$nodejsVersion'"

        pnpmVersion="${{ inputs.pnpm-version }}"
        echo "📥pnpm version: '$pnpmVersion'"

        echo "📥Project directory: '${{ inputs.project-directory }}'"

        targetDirectory="${{ inputs.target-directory }}"
        echo "📥Target directory: '$targetDirectory'"

        main() {
          generateWebAssemblyTarget

          pushd "$targetDirectory"

          if [[ -n "$nodejsVersion" ]]
          then
            injectNodeJsVersion
          fi

          if [[ -n "$pnpmVersion" ]]
          then
            injectPnpmVersion
          fi

          tryToDisplayPackageJson

          popd

          echo "✅WebAssembly target ready in '$targetDirectory'!"
        }

        generateWebAssemblyTarget() {
          echo "📦Generating the WebAssembly project files..."

          if [[ "$development" == "true" ]]
          then
            local modeArg="--dev"
          else
            local modeArg="--release"
          fi

          if [[ -n "$scope" ]]
          then
            local scopeArg="--scope $scope"
          else
            local scopeArg=""
          fi

          wasm-pack build --target "$target" $modeArg $scopeArg --out-dir "$targetDirectory"
        }

        injectNodeJsVersion() {
          if [[ ! -f "package.json" ]]
          then
            echo "❌package.json was not generated for this target - cannot inject the requested NodeJS version!"
            exit 1
          fi

          echo "🧬Injecting the requested NodeJS version ('$nodejsVersion')..."

          local tempDescriptor="$(mktemp)"
          jq '.engines.node = "'"$nodejsVersion"'"' package.json > "$tempDescriptor"
          mv "$tempDescriptor" package.json
        }

        injectPnpmVersion() {
          if [[ ! -f "package.json" ]]
          then
            echo "❌package.json was not generated for this target - cannot inject the requested pnpm version!"
            exit 1
          fi

          echo "🧬Injecting the requested pnpm version ('$pnpmVersion')..."

          local tempDescriptor="$(mktemp)"
          jq '.packageManager = "pnpm@'"$pnpmVersion"'"' package.json > "$tempDescriptor"
          mv "$tempDescriptor" package.json
        }

        tryToDisplayPackageJson() {
          if [[ -f "package.json" ]]
          then
            echo "📦Generated package.json descriptor for the '$target' target:"
            jq -C '.' package.json
          else
            echo "💭No package.json descriptor generated for the '$target' target..."
          fi
        }

        main

name: Tag and release
description: Merges a pull request, creates a Git tag and publishes a GitHub release, from a Git branch named according to semantic versioning.

inputs:
  draft-release:
    description: Draft the release - do not publish it.
    default: false

  notes-file-processor:
    description: Bash script editing the generated release notes.

  set-major-tag:
    description: Create/move the 'vX' tag to this commit (X=major version).
    default: false

  dry-run:
    description: Run the action without performing commands.
    default: false

  git-strategy:
    description: How to apply the pull request to the Git repository. Can be `merge`, `rebase` or `squash`.
    default: rebase

outputs:
  release-tag:
    description: The Git tag associated with the release.
    value: ${{ steps.create-release.outputs.release-tag }}

  major-tag:
    description: The Git tag of the major version, if set.
    value: ${{ steps.set-major-tag.outputs.major-tag }}

runs:
  using: composite
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        if [[ -z "${{ inputs.draft-release }}" ]]
        then
          echo "❌Missing action input: 'draft-release'!" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.set-major-tag }}" ]]
        then
          echo "❌Missing action input: 'set-major-tag'!" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.dry-run }}" ]]
        then
          echo "❌Missing action input: 'dry-run'!" >&2
          exit 1
        fi

        case "${{ inputs.git-strategy }}" in
          merge | rebase | squash)
            ;;

          *)
            echo "❌Invalid value for input: 'git-strategy': '${{ inputs.git-strategy }}'!" >&2
            exit 1
        esac

    - name: Display inputs
      shell: bash
      run: |
        echo "📥dry-run: ${{ inputs.dry-run }}"
        echo "📥draft-release: ${{ inputs.draft-release }}"
        echo "📥set-major-tag: ${{ inputs.set-major-tag }}"
        echo "📥notes-file-processor: ${{ inputs.notes-file-processor }}"
        echo "📥git-strategy: ${{ inputs.git-strategy }}"

    - name: Detect branch and version
      id: detect-branch-version
      uses: giancosta86/aurora-github/actions/detect-branch-version@v10.2.0

    - name: Verify versions
      shell: bash
      run: |
        version="${{ steps.detect-branch-version.outputs.version }}"

        if [[ -n "$version" ]]
        then
          echo "🔎Detected version: '$version'"
        else
          echo "❌The current version could not be detected from the Git branch ('$branch')!" >&2
          exit 1
        fi

        setMajorTag="${{ inputs.set-major-tag }}"

        if [[ "$setMajorTag" == "true" ]]
        then
          major="${{ steps.detect-branch-version.outputs.major }}"

          if [[ -n "$major" ]]
          then
            echo "🔎Detected major version: '$major'"
          else
            echo "❌The major version could not be detected!" >&2
            exit 1
          fi
        fi

    - name: Detect if a pull request was the trigger
      shell: bash
      run: |
        echo "🧭GITHUB_REF IS: '$GITHUB_REF'"

        if [[ "$GITHUB_REF" =~ ^refs/pull/ ]]
        then
          inPullRequestWorkflow=true

          if [[ "${{ inputs.dry-run }}" != "true" ]]
          then
            echo "❌This action can be run from a workflow triggered by a pull-request only when dry-run is enabled"
            exit 1
          fi
        else
          inPullRequestWorkflow=false
        fi

        echo "inPullRequestWorkflow=$inPullRequestWorkflow" >> $GITHUB_ENV

    - name: Retrieve pull request information
      shell: bash
      run: |
        branch="${{ steps.detect-branch-version.outputs.branch }}"

        echo "😺Retrieving Git pull request info for branch: '$branch'..."

        pullRequestJson="$(gh pr view $branch --json title,number,baseRefOid,headRefOid --jq '{title: .title, number: .number, baseSha: .baseRefOid, headSha: .headRefOid}')"

        echo "✅Pull request JSON data retrieved!"

        title=$(echo "$pullRequestJson" | jq -r .title)
        number=$(echo "$pullRequestJson" | jq -r .number)
        baseSha=$(echo "$pullRequestJson" | jq -r .baseSha)
        headSha=$(echo "$pullRequestJson" | jq -r .headSha)

        echo "pullRequestTitle=$title" >> $GITHUB_ENV
        echo "pullRequestNumber=$number" >> $GITHUB_ENV
        echo "pullRequestBaseSha=$baseSha" >> $GITHUB_ENV
        echo "pullRequestHeadSha=$headSha" >> $GITHUB_ENV
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Print pull request information
      shell: bash
      run: |
        echo "🧭In pull request workflow? $inPullRequestWorkflow"
        echo "🔁Pull request title: '$pullRequestTitle'"
        echo "🔁Pull request number: '$pullRequestNumber'"
        echo "🔁Pull request base SHA: '$pullRequestBaseSha'"
        echo "🔁Pull request head SHA: '$pullRequestHeadSha'"

    - name: Reset any Git local change
      shell: bash
      run: |
        echo "⏱️Discarding local changes to the Git repository..."
        git reset --hard HEAD
        echo "✅Git repository successfully reset"

    - name: Fetch Git log
      shell: bash
      run: |
        main() {
          if [[ "$inPullRequestWorkflow" == "true" ]]
          then
            echo "📥Fetching Git log within a pull request workflow..."
            fetchLogWithinPullRequestWorkflow
          else
            echo "📥Fetching Git log not within a pull request workflow..."
            fetchLogNotWithinPullRequestWorkflow
          fi

          echo "✅Git log ready!"
        }

        function fetchLogWithinPullRequestWorkflow() {
          git fetch origin "$pullRequestBaseSha" "$pullRequestHeadSha"
        }

        function fetchLogNotWithinPullRequestWorkflow() {
          fetchGitSha "$pullRequestHeadSha"

          fetchGitSha "$pullRequestBaseSha"
        }

        function fetchGitSha() {
          local requiredSha="$1"

          local branch="${{ steps.detect-branch-version.outputs.branch }}"
          local depthDelta=25

          echo "🧭Ensuring Git SHA '$requiredSha' is available..."

          while ! git cat-file commit "$requiredSha" > /dev/null 2>&1
          do
            echo "📥Fetching $depthDelta more commits..."
            git fetch --deepen="$depthDelta" origin "$branch"
            depthDelta=$((depthDelta * 2))
          done

          echo "✅Git SHA '$requiredSha' ready!"
        }

        main

    - name: Fetch Git tags
      shell: bash
      run: |
        echo "📥Retrieving Git tags..."
        gitErrorLog="$(mktemp)"
        if git fetch --tags > /dev/null 2> "$gitErrorLog"
        then
          echo "✅Git tags retrieved!"
        else
          echo "❌Cannot retrieve the Git tags, because of these errors:" >&2
          cat "$gitErrorLog" >&2
          echo "❌❌❌" >&2
          exit 1
        fi

    - name: Merge the pull request
      shell: bash
      run: |
        branch="${{ steps.detect-branch-version.outputs.branch }}"

        echo "🔀Now merging the PR for branch '$branch', via the '${{ inputs.git-strategy }}' Git strategy..."

        if [[ "${{ inputs.dry-run }}" != "true" ]]
        then
          gitStrategyArg="--${{ inputs.git-strategy }}"
          gh pr merge "$branch" $gitStrategyArg --delete-branch
        else
          echo "💭Just simulating pull request merging, in dry-run mode..."
        fi
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Create the Git tag
      id: create-git-tag
      shell: bash
      run: |
        version="${{ steps.detect-branch-version.outputs.version }}"

        tag="v${version}"
        echo "📌Creating and pushing Git tag '$tag'..."

        if [[ "${{ inputs.dry-run }}" != "true" ]]
        then
          git tag "$tag"
          git push origin "$tag"
          echo "📌Tag created and pushed!"
        else
          echo "💭Just simulating Git tag creation, in dry-run mode..."
        fi

        echo "tag=$tag" >> $GITHUB_OUTPUT

    - name: Publish or draft release
      id: create-release
      shell: bash
      run: |
        tag="${{ steps.create-git-tag.outputs.tag }}"
        echo "📌Release tag: '$tag'..."

        baseSha="$pullRequestBaseSha"
        echo "🏰Base SHA: '$baseSha'"

        headSha="$pullRequestHeadSha"
        echo "👤Head SHA: '$headSha'"

        function createRelease() {
          local repoBasename="$(basename "$GITHUB_REPOSITORY")"
          echo "🧭Repository basename: '$repoBasename'"

          local version="${{ steps.detect-branch-version.outputs.version }}"
          echo "🔎Version: '$version'"

          local releaseTitle="$repoBasename $version"
          echo "🔎Release title: '$releaseTitle'"

          local draftOnly="${{ inputs.draft-release }}"
          echo "🔎Draft only? $draftOnly"

          local releaseNotesFile="$(mktemp)"
          generateReleaseNotes "$releaseNotesFile"

          local notesFileProcessor=${{ inputs.notes-file-processor }}
          if [[ -n "$notesFileProcessor" ]]
          then
            echo "🖋Release notes file processor found: '$notesFileProcessor'"

            bash "$notesFileProcessor" "$releaseNotesFile"

            echo "🎀Processed release notes:"
            cat "$releaseNotesFile"
            echo "🎀🎀🎀"
          else
            echo "💭No release notes file processor..."
          fi

          if [[ "$draftOnly" == "true" ]]
          then
            echo "📝Drafting release '$releaseTitle'..."

            if [[ "${{ inputs.dry-run }}" != "true" ]]
            then
              gh release create "$tag" --title "$releaseTitle" --latest --notes-file "$releaseNotesFile" --draft

              echo "📝Release drafted!"
            else
              echo "💭Just simulating draft release creation, in dry-run mode..."
            fi
          else
            echo "🌟Publishing release '$releaseTitle'..."

            if [[ "${{ inputs.dry-run }}" != "true" ]]
            then
              gh release create "$tag" --title "$releaseTitle" --latest --notes-file "$releaseNotesFile"

              echo "🌟Release published!"
            else
              echo "💭Just simulating release creation, in dry-run mode..."
            fi
          fi
        }

        function generateReleaseNotes() {
          local outputFile="$1"

          writeCommitList "$outputFile"

          echo "---" >> "$outputFile"

          writePullRequestData "$outputFile"

          echo >> "$outputFile"

          writeChangeLog "$outputFile"

          echo "📝Release notes generated!"
          cat "$outputFile"
          echo "📝📝📝"
        }

        function writeCommitList() {
          local outputFile="$1"

          printGitLogsAsMarkdown "§+-+§" >> "$outputFile"
        }

        function printGitLogsAsMarkdown() {
          local marker="$1"

          git log --no-merges --reverse --pretty=format:"$marker* %B" "$baseSha".."$headSha" | sed "
          s/^/  /
          s/^  $marker//
          "
        }

        function writePullRequestData() {
          local outputFile="$1"

          echo -e "**Pull request**: $pullRequestTitle (#$pullRequestNumber):" >> "$outputFile"
        }

        function writeChangeLog() {
          local outputFile="$1"

          local mostSpecificBaseTag="$(git tag --points-at "$baseSha" | awk '{ print length, $0 }' | sort -nr | cut -d' ' -f2- | head -n 1)"

          if [[ -n "$mostSpecificBaseTag" ]]
          then
            echo "📌Tag '$mostSpecificBaseTag' found for the '$baseSha' base SHA"
            local baseReference="$mostSpecificBaseTag"
          else
            echo "💭No tags associated with the '$baseSha' base SHA - using it directly"
            local baseReference="$baseSha"
          fi

          echo "🧭Base reference: '$baseReference'"
          echo "📌Release tag: '$tag'"

          echo "**Full changelog**: https://github.com/$GITHUB_REPOSITORY/compare/$baseReference..$tag" >> "$outputFile"
        }

        createRelease

        echo "release-tag=$tag" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Create or move major version tag
      if: inputs.set-major-tag == 'true'
      id: set-major-tag
      shell: bash
      run: |
        major="${{ steps.detect-branch-version.outputs.major }}"

        majorTag="v${major}"

        echo "🪩Setting major version tag '$majorTag'..."

        if [[ "${{ inputs.dry-run }}" != "true" ]]
        then
          git tag -f "$majorTag"
          git push origin "$majorTag" --force

          echo "🪩Major version tag set!"
        else
          echo "💭Just simulating major version tag creation, in dry-run mode..."
        fi

        echo "major-tag=$majorTag" >> $GITHUB_OUTPUT

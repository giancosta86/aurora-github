name: Tag and release
description: Creates a Git tag and a GitHub release, from a Git branch named according to semver; by default, it also deletes the current branch.

inputs:
  draft-only:
    description: Only draft the release.
    default: false

  delete-branch:
    description: Delete the branch after creating the tag.
    default: true

  set-major-tag:
    description: Create/move the 'vX' tag to this commit (X=major version)
    default: false

runs:
  using: composite
  steps:
    - name: Ensure the action is invoked when merging a pull request
      shell: bash
      run: |
        inPullRequestMerging="$(jq -r .pull_request.merged "$GITHUB_EVENT_PATH")"

        if [[ "$inPullRequestMerging" != "true" ]]
        then
          echo "❌This action can only be invoked when merging a pull request!" >&2
          exit 1
        fi

    - name: Validate inputs
      shell: bash
      run: |
        if [[ -z "${{ inputs.draft-only }}" ]]
        then
          echo "❌Missing action input: 'draft-only'!" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.delete-branch }}" ]]
        then
          echo "❌Missing action input: 'delete-branch'!" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.set-major-tag }}" ]]
        then
          echo "❌Missing action input: 'set-major-tag'!" >&2
          exit 1
        fi

    - name: Detect branch and version
      id: detect-branch-version
      uses: giancosta86/aurora-github/actions/detect-branch-version@v6.0.0

    - name: Verify branch and version
      shell: bash
      run: |
        branch="${{ steps.detect-branch-version.outputs.branch }}"
        defaultBranch="${{ github.event.repository.default_branch }}"
        version="${{ steps.detect-branch-version.outputs.version }}"
        major="${{ steps.detect-branch-version.outputs.major }}"
        setMajorTag=${{ inputs.set-major-tag == 'true' }}

        if [[ -n "$branch" ]]
        then
          echo "🌲Current branch: '$branch'"
        else
          echo "❌The current Git branch could not be detected!" >&2
          exit 1
        fi

        echo "🌲Default repository branch: '$defaultBranch'"

        if [[ "$branch" == "$defaultBranch" ]]
        then
          echo "❌This action cannot be run from the default branch!" >&2
          exit 1
        fi

        if [[ -z "$version" ]]
        then
          echo "❌The current version could not be detected from the Git branch ('$branch')!" >&2
          exit 1
        fi

        if [[ "$setMajorTag" == "true" && -z "$major" ]]
        then
          echo "❌The major version could not be detected!" >&2
          exit 1
        fi

    - name: Delete Git branch
      if: ${{ inputs.delete-branch == 'true' }}
      shell: bash
      run: |
        branch="${{ steps.detect-branch-version.outputs.branch }}"

        echo "Deleting Git 🌲branch '$branch'..."

        git push origin --delete "$branch"

        echo "🌲Branch deleted!"

    - name: Create Git tag
      id: create-git-tag
      shell: bash
      run: |
        version="${{ steps.detect-branch-version.outputs.version }}"

        tag="v${version}"
        echo "📌Creating and pushing Git tag '$tag'..."
        git tag "$tag"
        git push origin "$tag"
        echo "📌Tag created and pushed!"

        echo "tag=$tag" >> $GITHUB_OUTPUT

    - name: Create or draft release
      shell: bash
      run: |
        draftOnly="${{ inputs.draft-only }}"
        version="${{ steps.detect-branch-version.outputs.version }}"
        tag="${{ steps.create-git-tag.outputs.tag }}"

        repoBasename="$(basename "$GITHUB_REPOSITORY")"
        releaseTitle="$repoBasename $version"
        releaseRecapMessage="release '$releaseTitle' from tag '$tag'"

        if [[ "$draftOnly" = true ]]
        then
          echo "📝Drafting $releaseRecapMessage..."
          gh release create "$tag" --title "$releaseTitle" --draft
          echo "📝Release drafted!"
        else
          echo "🌟Creating $releaseRecapMessage..."
          gh release create "$tag" --title "$releaseTitle"
          echo "🌟Release created!"
        fi
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Create or move major version tag
      if: ${{ inputs.set-major-tag == 'true' }}
      shell: bash
      run: |
        major="${{ steps.detect-branch-version.outputs.major }}"

        majorTag="v${major}"

        echo "🪩Setting major version tag '$majorTag'..."
        git tag -f "$majorTag"
        git push origin "$majorTag" --force
        echo "🪩Major version tag set!"

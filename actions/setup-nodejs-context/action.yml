name: Setup a NodeJS context
description: Conditionally installs NodeJS along with pnpm, as well as the dependencies listed in package.json.

inputs:
  project-directory:
    description: The directory containing package.json.
    default: .

runs:
  using: composite
  steps:
    - name: Verify package.json
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        echo "💻Setting up NodeJS context in '${{ inputs.project-directory }}'..."

        if [[ ! -f "package.json" ]]
        then
          echo "❌The package.json descriptor is missing!" >&2
          exit 1
        fi

    - name: Detect toolchain requests
      id: detect-toolchain-requests
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        requestedNodeVersion="$(jq -r '.engines.node // ""' package.json)"

        if [[ -n "$requestedNodeVersion" ]]
        then
          echo "🔎NodeJS version requested in package.json: '$requestedNodeVersion'"
          installToolchain=true
        else
          echo "💭No requested NodeJS version in package.json..."
          installToolchain=false
        fi

        echo "echo 🔎Install NodeJS toolchain? $installToolchain"

        echo "install-toolchain=$installToolchain" >> $GITHUB_OUTPUT

        echo "requested-node-version=$requestedNodeVersion" >> $GITHUB_OUTPUT

    - name: Install NodeJS
      if: ${{ steps.detect-toolchain-requests.outputs.install-toolchain == 'true' }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ steps.detect-toolchain-requests.outputs.requested-node-version }}

    - name: Print NodeJS version
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        echo "🎡NodeJS version: '$(node --version)'"

    - name: Detect the requested pnpm version
      if: ${{ steps.detect-toolchain-requests.outputs.install-toolchain == 'true' }}
      id: detect-pnpm-version
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        packageManagerReference="$(jq -r '.packageManager // ""' package.json)"

        echo "📦Package manager reference: '$packageManagerReference'"

        if [[ -n "$packageManagerReference" ]]
        then
          requestedPackageManager="$(echo "$packageManagerReference" | cut -d '@' -f 1)"

          if [[ "$requestedPackageManager" != "pnpm" ]]
          then
            echo "❌The package manager must be pnpm!" >&2
            exit 1
          fi

          requestedPnpmVersion="$(echo "$packageManagerReference" | cut -d '@' -f 2)"

          echo "🔎Requested pnpm version: '$requestedPnpmVersion'"

          pnpmVersion="$requestedPnpmVersion"
        else
          echo "🌟Defaulting to the latest pnpm version!"
          pnpmVersion="latest"
        fi

        echo "🔬pnpm version to install: '$pnpmVersion'"

        echo "requested-pnpm-version=$pnpmVersion" >> $GITHUB_OUTPUT

    - name: Install pnpm
      if: ${{ steps.detect-toolchain-requests.outputs.install-toolchain == 'true' }}
      uses: pnpm/action-setup@v4
      with:
        version: ${{ steps.detect-pnpm-version.outputs.requested-pnpm-version }}

    - name: Print pnpm version
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        echo "📦pnpm version: $(pnpm --version)"

    - name: Install the dependencies
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        lockFile="pnpm-lock.yaml"

        if [[ -f "$lockFile" ]]
        then
          echo "🧊Installing dependencies with frozen lockfile, as '$lockFile' is present..."
          lockFileArg="--frozen-lockfile"
        else
          echo "🌞Installing dependencies without frozen lockfile, as '$lockFile' is missing..."
          lockFileArg="--no-frozen-lockfile"
        fi

        pnpm install $lockFileArg

        echo "✅Dependencies installed!"

    - name: Print confirmation message
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: echo "✅NodeJS context in '${{ inputs.project-directory }}' ready!"

name: Setup a NodeJS context
description: Conditionally installs a specific NodeJS version, pnpm, as well as the dependencies listed in package.json.

inputs:
  pnpm-version:
    description: The version of pnpm to use.
    default: 9

  project-directory:
    description: The directory containing package.json.
    default: .

  shell:
    description: The shell used to run commands.
    default: bash

runs:
  using: composite
  steps:
    - name: Setup environment variables
      shell: ${{ inputs.shell }}
      working-directory: ${{ inputs.project-directory }}
      run: |
        if [[ -f ".nvmrc" ]]
        then
          echo "installNode=true" >> $GITHUB_ENV
        else
          echo "installNode=false" >> $GITHUB_ENV
        fi

        if [[ -f "package.json" ]]
        then
          echo "installDependencies=true" >> $GITHUB_ENV
        else
          echo "installDependencies=false" >> $GITHUB_ENV
        fi

    - name: Print welcome message
      shell: ${{ inputs.shell }}
      working-directory: ${{ inputs.project-directory }}
      run: |
        echo "ðŸ’»Setting up NodeJS context in '${{ inputs.project-directory }}'..."

    - name: Install NodeJS
      if: ${{ env.installNode == 'true' }}
      uses: actions/setup-node@v4
      with:
        node-version-file: ${{ inputs.project-directory }}/.nvmrc

    - name: Print NodeJS version
      shell: ${{ inputs.shell }}
      working-directory: ${{ inputs.project-directory }}
      run: |
        echo "ðŸ”Žnode version: $(node --version)"

    - name: Install pnpm
      if: ${{ env.installNode == 'true' }}
      uses: pnpm/action-setup@v4
      with:
        version: ${{ inputs.pnpm-version }}

    - name: Print pnpm version
      shell: ${{ inputs.shell }}
      working-directory: ${{ inputs.project-directory }}
      run: |
        echo "ðŸ“¦pnpm version: $(pnpm --version)"

    - name: Install the dependencies
      if: ${{ env.installDependencies == 'true' }}
      shell: ${{ inputs.shell }}
      working-directory: ${{ inputs.project-directory }}
      run: |
        lockFile="pnpm-lock.yaml"
        if [[ -f "$lockFile" ]]
        then
          echo "ðŸ§ŠInstalling dependencies with frozen lockfile, as '$lockFile' is present..."
          pnpm install --frozen-lockfile
        else
          echo "ðŸŒžInstalling dependencies without frozen lockfile, as '$lockFile' is missing..."
          pnpm install --no-frozen-lockfile
        fi

        echo "âœ…Dependencies installed!"

    - name: Print confirmation message
      shell: ${{ inputs.shell }}
      working-directory: ${{ inputs.project-directory }}
      run: |
        echo "âœ…NodeJS context ready!"

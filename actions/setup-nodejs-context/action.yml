name: Setup a NodeJS context
description: Sets up a specific NodeJS version and installs pnpm as well as the dependencies listed in package.json; any of these steps can be skipped by disabling the related flag.

inputs:
  setup-nodejs:
    description: Set up the requested NodeJS version.
    default: true

  install-pnpm:
    description: Install the requested pnpm version.
    default: true

  install-dependencies:
    description: Install the dependencies for the current package.
    default: true

  pnpm-version:
    description: The version of pnpm to use.
    default: 9

  project-directory:
    description: The directory containing package.json.
    default: .

  shell:
    description: The shell used to run commands.
    default: bash

runs:
  using: composite
  steps:
    - name: Validate inputs
      shell: ${{ inputs.shell }}
      working-directory: ${{ inputs.project-directory }}
      run: |
        if [[ -z "${{ inputs.setup-nodejs }}" ]]
        then
          echo "❌Missing action input: 'setup-nodejs'!" >&2
          exit 1
        fi

        if [[ "${{ inputs.setup-nodejs }}" == "true" ]]
        then
          if [[ ! -f ".nvmrc" ]]
          then
            echo "❌The .nvmrc version file does not exist!!" >&2
            exit 1
          fi
        fi

        if [[ -z "${{ inputs.install-pnpm }}" ]]
        then
          echo "❌Missing action input: 'install-pnpm'!" >&2
          exit 1
        fi

        if [[ "${{ inputs.install-pnpm }}" == "true" ]]
        then
          if [[ -z "${{ inputs.pnpm-version }}" ]]
          then
            echo "❌Missing action input: 'pnpm-version'!" >&2
            exit 1
          fi
        fi

        if [[ -z "${{ inputs.install-dependencies }}" ]]
        then
          echo "❌Missing action input: 'install-dependencies'!" >&2
          exit 1
        fi

        if [[ "${{ inputs.install-dependencies }}" == "true" ]]
        then
          if [[ ! -f "package.json" ]]
          then
            echo "❌The package.json descriptor file does not exist!!" >&2
            exit 1
          fi
        fi

    - name: Print welcome message
      shell: ${{ inputs.shell }}
      working-directory: ${{ inputs.project-directory }}
      run: |
        echo "💻Setting up NodeJS context in '${{ inputs.project-directory }}'..."

    - name: Setup NodeJS
      if: ${{ inputs.setup-nodejs == 'true' }}
      uses: actions/setup-node@v4
      with:
        node-version-file: ${{ inputs.project-directory }}/.nvmrc

    - name: Print NodeJS version
      shell: ${{ inputs.shell }}
      working-directory: ${{ inputs.project-directory }}
      run: |
        echo "🔎node version: $(node --version)"

    - name: Install pnpm
      if: ${{ inputs.install-pnpm == 'true' }}
      uses: pnpm/action-setup@v4
      with:
        version: ${{ inputs.pnpm-version }}

    - name: Print pnpm version
      shell: ${{ inputs.shell }}
      working-directory: ${{ inputs.project-directory }}
      run: |
        echo "📦pnpm version: $(pnpm --version)"

    - name: Install the dependencies
      if: ${{ inputs.install-dependencies == 'true' }}
      shell: ${{ inputs.shell }}
      working-directory: ${{ inputs.project-directory }}
      run: |
        lockFile="pnpm-lock.yaml"
        if [[ -f "$lockFile" ]]
        then
          echo "🧊Installing dependencies with frozen lockfile, as '$lockFile' is present..."
          pnpm install --frozen-lockfile
        else
          echo "🌞Installing dependencies without frozen lockfile, as '$lockFile' is missing..."
          pnpm install --no-frozen-lockfile
        fi

        echo "✅Dependencies installed!"

    - name: Print confirmation message
      shell: ${{ inputs.shell }}
      working-directory: ${{ inputs.project-directory }}
      run: |
        echo "✅NodeJS context ready!"

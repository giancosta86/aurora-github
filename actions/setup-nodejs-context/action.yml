name: Setup a NodeJS context
description: Conditionally installs a specific NodeJS version, pnpm, as well as the dependencies listed in package.json.

inputs:
  project-directory:
    description: Directory containing the project files.
    default: .

runs:
  using: composite
  steps:
    - name: Print welcome message
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        echo "ðŸ’»Setting up NodeJS context in '${{ inputs.project-directory }}'..."

    - name: Setup environment variables
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        if [[ -f ".nvmrc" ]]
        then
          installNode=true
        else
          installNode=false
        fi
        echo "ðŸ”ŽInstall NodeJS? $installNode"
        echo "installNode=$installNode" >> $GITHUB_ENV

        if [[ -f "package.json" ]]
        then
          installDependencies=true
        else
          installDependencies=false
        fi
        echo "ðŸ”ŽInstall dependencies? $installDependencies"
        echo "installDependencies=$installDependencies" >> $GITHUB_ENV

    - name: Install NodeJS
      if: ${{ env.installNode == 'true' }}
      uses: actions/setup-node@v4
      with:
        node-version-file: ${{ inputs.project-directory }}/.nvmrc

    - name: Print NodeJS version
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        echo "ðŸ”Žnode version: $(node --version)"

    - name: Detect the requested pnpm version
      if: ${{ env.installNode == 'true' }}
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        if [[ -f ".pnpmver" ]]
        then
          pnpmVersion="$(cat .pnpmver)"
        else
          pnpmVersion="latest"
        fi
        echo "ðŸ”¬pnpm version to install: '$pnpmVersion'"
        echo "pnpmVersion=$pnpmVersion" >> $GITHUB_ENV

    - name: Install pnpm
      if: ${{ env.installNode == 'true' }}
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.pnpmVersion }}

    - name: Print pnpm version
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        echo "ðŸ“¦pnpm version: $(pnpm --version)"

    - name: Install the dependencies
      if: ${{ env.installDependencies == 'true' }}
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        lockFile="pnpm-lock.yaml"
        if [[ -f "$lockFile" ]]
        then
          echo "ðŸ§ŠInstalling dependencies with frozen lockfile, as '$lockFile' is present..."
          pnpm install --frozen-lockfile
        else
          echo "ðŸŒžInstalling dependencies without frozen lockfile, as '$lockFile' is missing..."
          pnpm install --no-frozen-lockfile
        fi

        echo "âœ…Dependencies installed!"

    - name: Print confirmation message
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: echo "âœ…NodeJS context ready!"

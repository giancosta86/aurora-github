name: Verify JVM project
description: Verifies the source files of a project for the Java Virtual Machine - using Maven or Gradle.

inputs:
  java-version:
    description: Java version (in SDKMAN) to install.

  tool-version:
    description: Build tool version (in SDKMAN) to install.

  quiet:
    description: Run the build tool in quiet mode
    default: true

  crash-on-critical-todos:
    description: Crash the workflow if critical TODOs are found.
    default: true

  source-file-regex:
    description: PCRE pattern describing the source files.
    default: '^\.\/src\/.+\.(java|kt|scala|groovy)$'

  enforce-branch-version:
    description: How the branch version should be enforced.
    default: inject

  project-directory:
    description: The directory containing the project descriptor.
    default: .

runs:
  using: composite
  steps:
    - name: Validate inputs
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        if [[ -z "${{ inputs.quiet }}" ]]
        then
          echo "‚ùåMissing action input: 'quiet'!" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.crash-on-critical-todos }}" ]]
        then
          echo "‚ùåMissing action input: 'crash-on-critical-todos'!" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.source-file-regex }}" ]]
        then
          echo "‚ùåMissing action input: 'source-file-regex'!" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.enforce-branch-version }}" ]]
        then
          echo "‚ùåMissing action input: 'enforce-branch-version'!" >&2
          exit 1
        fi

    - name: Setup Python context
      shell: bash
      run: |
        pythonPath="${{ github.action_path }}/../.."
        echo "PYTHONPATH=$pythonPath" >> $GITHUB_ENV

        echo "INPUT_PROJECT_DIRECTORY=${{ inputs.project-directory }}" >> $GITHUB_ENV

    - name: Detect the build tool
      shell: python
      run: |
        from core.jvm import get_build_tool, Inputs

        inputs = Inputs.from_env()

        get_build_tool(inputs).write_to_github_env()

    - name: Enforce branch version
      uses: giancosta86/aurora-github/actions/enforce-branch-version@v8.1.0
      with:
        mode: ${{ inputs.enforce-branch-version }}
        project-directory: ${{ inputs.project-directory }}

    - name: Install Java
      if: ${{ inputs.java-version != '' }}
      uses: giancosta86/aurora-github/actions/install-via-sdkman@v8.1.0
      with:
        candidate: java
        version: ${{ inputs.java-version }}

    - name: Install Maven
      if: ${{ inputs.tool-version != '' && env.buildTool == 'mvn' }}
      uses: giancosta86/aurora-github/actions/install-via-sdkman@v8.1.0
      with:
        candidate: maven
        version: ${{ inputs.tool-version }}

    - name: Install Gradle
      if: ${{ inputs.tool-version != '' && env.buildTool == 'gradle' }}
      uses: giancosta86/aurora-github/actions/install-via-sdkman@v8.1.0
      with:
        candidate: gradle
        version: ${{ inputs.tool-version }}

    - name: Run Maven
      if: ${{ env.buildTool == 'mvn' }}
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        if [[ "${{ inputs.quiet }}" == "true" ]]
        then
          quietArg="-q"
        else
          quietArg=""
        fi

        echo "ü™∂Running Maven to verify the project..."

        mvn -B $quietArg verify

        echo "‚úÖVerification successful!"

    - name: Run Gradle
      if: ${{ env.buildTool == 'gradle' }}
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        if [[ "${{ inputs.quiet }}" == "true" ]]
        then
          quietArg="-q"
        else
          quietArg=""
        fi

        echo "üêòRunning Gradle to verify the project..."

        gradle --no-daemon --no-scan $quietArg build

        echo "‚úÖVerification successful!"

    - name: Check for critical TODOs
      uses: giancosta86/aurora-github/actions/find-critical-todos@v8.1.0
      with:
        source-file-regex: ${{ inputs.source-file-regex }}
        crash-on-found: ${{ inputs.crash-on-critical-todos }}
        display-lines: true
        root-directory: ${{ inputs.project-directory }}

    - name: Print confirmation message
      shell: bash
      run: echo "‚úÖJVM project verified!"

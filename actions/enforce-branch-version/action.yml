name: Enforce branch version
description: Ensures that the version in the artifact descriptor matches the Git branch version - by injecting or merely by checking.

inputs:
  mode:
    description: How to enforce the branch version. Can be "inject", "check" or "skip".

  artifact-descriptor:
    description: Relative path to the artifact descriptor.

  project-directory:
    description: The directory containing the project.
    default: .

runs:
  using: composite
  steps:
    - name: Validate inputs
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        echo "📥Requested mode: '${{ inputs.mode }}'"

        case "${{ inputs.mode }}" in
          inject | check)
            ;;

          skip)
            echo "💭Skipping branch version enforcement, as requested..."
            ;;

          *)
            echo "❌Invalid value for 'mode' input: '${{ inputs.mode }}'!" >&2
            exit 1
        esac

    - name: Ensure the descriptor exists
      if: ${{ inputs.mode != 'skip' }}
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        requestedDescriptor="${{ inputs.artifact-descriptor }}"
        echo "📥Requested descriptor: '$requestedDescriptor'"

        if [[ -n "$requestedDescriptor" ]]
        then
          echo "✅Artifact descriptor provided!"
          artifactDescriptor="$requestedDescriptor"
        else
          echo "🔮Trying to detect the artifact descriptor..."

          if [[ -f "package.json" ]]
          then
            echo "📦package.json descriptor for NodeJS detected!"
            artifactDescriptor="package.json"
          elif [[ -f "Cargo.toml" ]]
          then
            echo "🦀Cargo.toml descriptor for Rust detected!"
            artifactDescriptor="Cargo.toml"
          elif [[ -f "pom.xml" ]]
          then
            echo "🪶pom.xml descriptor for Maven detected!"
            artifactDescriptor="pom.xml"
          elif [[ -f "build.gradle" ]]
          then
            echo "🐘build.gradle descriptor for Gradle detected!"
            artifactDescriptor="build.gradle"
          elif [[ -f "build.gradle.kts" ]]
          then
            echo "🐘build.gradle.kts descriptor for Gradle detected!"
            artifactDescriptor="build.gradle.kts"
          else
            echo "💭No supported descriptors found..."
            artifactDescriptor=""
          fi
        fi

        echo "🔎Artifact descriptor: '$artifactDescriptor'"

        if [[ -z "$artifactDescriptor" ]]
        then
          echo "❌No artifact descriptor requested - and none can be detected!" >&2
          exit 1
        fi

        if [[ ! -f "$artifactDescriptor" ]]
        then
          echo "❌Cannot find the artifact descriptor file: '$artifactDescriptor'!" >&2
          exit 1
        fi

        echo "artifactDescriptor=$artifactDescriptor" >> $GITHUB_ENV

    - name: Infer the technology
      if: ${{ inputs.mode != 'skip' }}
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        case "$(basename "$artifactDescriptor")" in
          package.json)
            tech="nodejs"
            ;;

          Cargo.toml)
            tech="rust"
            ;;

          pom.xml)
            tech="maven"
            ;;

          build.gradle | build.gradle.kts)
            tech="gradle"
            ;;

          *)
            tech=""
        esac

        echo "🤖Inferred technology: '${tech}'"
        echo "tech=$tech" >> $GITHUB_ENV

    - uses: giancosta86/aurora-github/actions/detect-branch-version@v8.1.0
      if: ${{ inputs.mode != 'skip' }}
      id: version-detector

    - name: Inject the branch version into the descriptor
      if: ${{ inputs.mode == 'inject' }}
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        version="${{ steps.version-detector.outputs.version }}"
        echo "🔎Detected branch version: '$version'"

        echo "🧬Injecting the branch version into the descriptor..."
        sed -i "s/0\.0\.0/${version}/g" "$artifactDescriptor"
        echo "✅Version injected!"

    - name: Print the content of the artifact descriptor
      if: ${{ inputs.mode != 'skip' }}
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        case "$tech" in
          nodejs)
            echo "📦NodeJS descriptor ($artifactDescriptor):"
            jq -C . "$artifactDescriptor"
            echo "📦📦📦"
            ;;

          rust)
            echo "🦀Rust crate descriptor ($artifactDescriptor):"
            cat "$artifactDescriptor"
            echo "🦀🦀🦀"
            ;;

          maven)
            echo "🪶Maven project descriptor ($artifactDescriptor):"
            cat "$artifactDescriptor"
            echo "🪶🪶🪶"
            ;;

          gradle)
            echo "🐘Gradle project descriptor ($artifactDescriptor):"
            cat "$artifactDescriptor"
            echo "🐘🐘🐘"
            ;;

          *)
            echo "🎁Unknown tech descriptor ($artifactDescriptor):"
            cat "$artifactDescriptor"
            echo "🎁🎁🎁"
        esac

    - name: Extract the NodeJS package version
      if: ${{ inputs.mode == 'check' && env.tech == 'nodejs' }}
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        echo "📤Extracting the artifact version from the 📦NodeJS descriptor ('$artifactDescriptor')..."

        artifactVersion="$(jq -r .version "$artifactDescriptor")"

        echo "artifactVersion=$artifactVersion" >> $GITHUB_ENV

    - name: Extract the Rust crate version
      if: ${{ inputs.mode == 'check' && env.tech == 'rust' }}
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        echo "📤Extracting the artifact version from the 🦀Rust descriptor ('$artifactDescriptor')..."

        artifactVersion="$(grep '^version' Cargo.toml | cut -d '"' -f2)"

        echo "artifactVersion=$artifactVersion" >> $GITHUB_ENV

    - name: Extract the Maven project version
      if: ${{ inputs.mode == 'check' && env.tech == 'maven' }}
      shell: python
      working-directory: ${{ inputs.project-directory }}
      run: |
        import os
        import xml.etree.ElementTree as ET

        tree = ET.parse('pom.xml')
        root = tree.getroot()
        namespaces = {'mvn': root.tag.split('}')[0].strip('{}')}

        version = root.find('.//mvn:version', namespaces).text

        with open(os.environ['GITHUB_ENV'], 'a') as env_file:
            env_file.write(f"version={version}\n")

    - name: Extract the Gradle project version
      if: ${{ inputs.mode == 'check' && env.tech == 'gradle' }}
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        echo "📤Extracting the artifact version from the 🐘Gradle descriptor ('$artifactDescriptor')..."

        artifactVersion="$(cat build.gradle.kts |  grep -P '^version\s+=\s+["'\''].+?["'\'']$' | cut -d '=' -f 2 | sed "s/[\"' ]//g")"

        echo "artifactVersion=$artifactVersion" >> $GITHUB_ENV

    - name: Ensure the artifact version matches the branch version
      if: ${{ inputs.mode == 'check' && env.tech != '' }}
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        branchVersion="${{ steps.version-detector.outputs.version }}"
        echo "🔎Branch version: '$branchVersion'"
        echo "🔎Artifact version: '$artifactVersion'"

        if [[ "$artifactVersion" == "$branchVersion" ]]
        then
          echo "✅The descriptor version matches the branch version!"
        else
          echo "❌The descriptor version and the branch version do not match!" >&2
          exit 1
        fi

    - name: Check unknown artifact version
      if: ${{ inputs.mode == 'check' && env.tech == '' }}
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      run: |
        branchVersion="${{ steps.version-detector.outputs.version }}"
        echo "🔎Branch version: '$branchVersion'"

        echo "🔎Ensuring the branch version exists in the 🎁unknown tech descriptor ('$artifactDescriptor')..."

        if grep -q "$branchVersion" "$artifactDescriptor"
        then
          echo "✅Version found in the descriptor!"
        else
          echo "❌The branch version cannot be found in the artifact descriptor!" >&2
          exit 1
        fi
